
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 16 14:24:53 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import arbol.declaraciones.*;
import arbol.expresiones.*;
import arbol.sentencias.*;
import arbol.tipos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 16 14:24:53 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\010\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\004\006\000\002\012\004" +
    "\000\002\012\002\000\002\027\004\000\002\027\002\000" +
    "\002\031\004\000\002\031\002\000\002\024\004\000\002" +
    "\024\003\000\002\025\006\000\002\022\004\000\002\022" +
    "\002\000\002\023\012\000\002\026\004\000\002\026\003" +
    "\000\002\030\006\000\002\005\005\000\002\005\002\000" +
    "\002\034\005\000\002\034\003\000\002\035\007\000\002" +
    "\035\006\000\002\035\003\000\002\036\005\000\002\036" +
    "\003\000\002\021\004\000\002\021\003\000\002\006\004" +
    "\000\002\006\010\000\002\006\006\000\002\006\010\000" +
    "\002\006\006\000\002\006\012\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\006\006\000\002\044" +
    "\004\000\002\044\002\000\002\015\004\000\002\015\002" +
    "\000\002\016\005\000\002\014\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\004\000\002" +
    "\011\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\040\006\000\002\041\006\000\002" +
    "\043\004\000\002\042\005\000\002\042\006\000\002\042" +
    "\002\000\002\037\005\000\002\037\003\000\002\013\010" +
    "\000\002\013\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\032\006\000\002\033" +
    "\004\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\002\uffff\030\005\001\002\000\004\002" +
    "\315\001\002\000\004\073\006\001\002\000\006\004\uffec" +
    "\016\007\001\002\000\010\032\276\052\277\073\232\001" +
    "\002\000\004\004\011\001\002\000\014\031\ufffb\032\ufffb" +
    "\046\ufffb\061\ufffb\062\012\001\002\000\004\073\267\001" +
    "\002\000\012\031\ufff9\032\ufff9\046\ufff9\061\211\001\002" +
    "\000\004\026\207\001\002\000\004\046\017\001\002\000" +
    "\004\026\ufffe\001\002\000\022\033\033\034\030\036\020" +
    "\037\022\040\021\053\025\054\023\073\031\001\002\000" +
    "\026\016\041\063\053\070\037\071\044\072\040\073\045" +
    "\074\042\075\034\076\046\077\051\001\002\000\004\046" +
    "\017\001\002\000\004\073\171\001\002\000\004\016\165" +
    "\001\002\000\004\047\164\001\002\000\004\016\160\001" +
    "\002\000\004\027\155\001\002\000\004\004\154\001\002" +
    "\000\026\016\041\063\053\070\037\071\044\072\040\073" +
    "\045\074\042\075\034\076\046\077\051\001\002\000\012" +
    "\014\106\016\144\026\107\027\uffb1\001\002\000\024\033" +
    "\033\034\030\036\020\037\022\040\021\047\uffe3\053\025" +
    "\054\023\073\031\001\002\000\026\016\041\063\053\070" +
    "\037\071\044\072\040\073\045\074\042\075\034\076\046" +
    "\077\051\001\002\000\056\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\050\uffba\051\uffba\001\002" +
    "\000\056\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\050\uffc3\051\uffc3\001\002\000\056\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\050" +
    "\uffbc\051\uffbc\001\002\000\056\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\050\uffbf\051\uffbf\001" +
    "\002\000\056\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\015\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\050\uffb7\051\uffb7\001\002\000\026\016" +
    "\041\063\053\070\037\071\044\072\040\073\045\074\042" +
    "\075\034\076\046\077\051\001\002\000\056\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\050\uffbb" +
    "\051\uffbb\001\002\000\046\004\uffcc\005\uffcc\006\uffcc\007" +
    "\123\010\117\015\uffcc\017\uffcc\020\126\021\124\022\121" +
    "\023\120\024\122\025\125\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\051\127\001\002\000\056\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\050\uffbe\051\uffbe\001" +
    "\002\000\064\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\106\015\uffb1\016\105\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\107\041\uffb1\042\uffb1\043\uffb1\044\uffb1\050\uffb1\051" +
    "\uffb1\001\002\000\056\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\050\uffb9\051\uffb9\001\002\000" +
    "\056\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\077" +
    "\012\076\013\074\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\050\075\051\uffc8\001\002\000\004\044\056\001" +
    "\002\000\056\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\015\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\050\uffb8\051\uffb8\001\002\000\056\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\050\uffbd\051\uffbd\001\002\000\026\016\041\063\053\070" +
    "\037\071\044\072\040\073\045\074\042\075\034\076\046" +
    "\077\051\001\002\000\056\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\050\uffc0\051\uffc0\001\002" +
    "\000\056\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\050\uffc2\051\uffc2\001\002\000\032\016\041" +
    "\035\uffd5\047\uffd5\063\053\070\037\071\044\072\040\073" +
    "\045\074\042\075\034\076\046\077\051\001\002\000\012" +
    "\005\uffaf\006\uffaf\015\uffaf\017\uffaf\001\002\000\032\016" +
    "\041\035\uffd5\047\uffd5\063\053\070\037\071\044\072\040" +
    "\073\045\074\042\075\034\076\046\077\051\001\002\000" +
    "\006\005\067\006\070\001\002\000\006\035\063\047\uffd7" +
    "\001\002\000\004\046\017\001\002\000\004\047\065\001" +
    "\002\000\024\033\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\047\uffdf\053\uffdf\054\uffdf\073\uffdf\001\002\000\004\047" +
    "\uffd8\001\002\000\004\046\017\001\002\000\026\016\041" +
    "\063\053\070\037\071\044\072\040\073\045\074\042\075" +
    "\034\076\046\077\051\001\002\000\012\005\uffb0\006\uffb0" +
    "\015\uffb0\017\uffb0\001\002\000\032\016\uffd4\035\uffd4\047" +
    "\uffd4\063\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\075\uffd4\076\uffd4\077\uffd4\001\002\000\006\035\uffd6\047" +
    "\uffd6\001\002\000\026\016\041\063\053\070\037\071\044" +
    "\072\040\073\045\074\042\075\034\076\046\077\051\001" +
    "\002\000\026\016\041\063\053\070\037\071\044\072\040" +
    "\073\045\074\042\075\034\076\046\077\051\001\002\000" +
    "\026\016\041\063\053\070\037\071\044\072\040\073\045" +
    "\074\042\075\034\076\046\077\051\001\002\000\026\016" +
    "\041\063\053\070\037\071\044\072\040\073\045\074\042" +
    "\075\034\076\046\077\051\001\002\000\056\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\050\uffc7" +
    "\051\uffc7\001\002\000\056\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\050\uffc6\051\uffc6\001\002" +
    "\000\056\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\050\uffc4\051\uffc4\001\002\000\056\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\050" +
    "\uffc5\051\uffc5\001\002\000\060\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\027\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\050\uffb4\051" +
    "\uffb4\001\002\000\026\016\041\063\053\070\037\071\044" +
    "\072\040\073\045\074\042\075\034\076\046\077\051\001" +
    "\002\000\026\016\041\063\053\070\037\071\044\072\040" +
    "\073\045\074\042\075\034\076\046\077\051\001\002\000" +
    "\004\073\110\001\002\000\064\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\106\015" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\107\027\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\050\uffb1\051\uffb1\001\002\000\060\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\015" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\027\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\050" +
    "\uffb3\051\uffb3\001\002\000\006\006\070\015\113\001\002" +
    "\000\064\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\106\015\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\107\027" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\050\uffb1\051\uffb1" +
    "\001\002\000\060\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\050\uffb2\051\uffb2\001\002" +
    "\000\006\006\070\017\116\001\002\000\056\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\015\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\050\uffb5" +
    "\051\uffb5\001\002\000\026\016\041\063\053\070\037\071" +
    "\044\072\040\073\045\074\042\075\034\076\046\077\051" +
    "\001\002\000\026\016\041\063\053\070\037\071\044\072" +
    "\040\073\045\074\042\075\034\076\046\077\051\001\002" +
    "\000\026\016\041\063\053\070\037\071\044\072\040\073" +
    "\045\074\042\075\034\076\046\077\051\001\002\000\026" +
    "\016\041\063\053\070\037\071\044\072\040\073\045\074" +
    "\042\075\034\076\046\077\051\001\002\000\026\016\041" +
    "\063\053\070\037\071\044\072\040\073\045\074\042\075" +
    "\034\076\046\077\051\001\002\000\026\016\041\063\053" +
    "\070\037\071\044\072\040\073\045\074\042\075\034\076" +
    "\046\077\051\001\002\000\026\016\041\063\053\070\037" +
    "\071\044\072\040\073\045\074\042\075\034\076\046\077" +
    "\051\001\002\000\026\016\041\063\053\070\037\071\044" +
    "\072\040\073\045\074\042\075\034\076\046\077\051\001" +
    "\002\000\026\016\041\063\053\070\037\071\044\072\040" +
    "\073\045\074\042\075\034\076\046\077\051\001\002\000" +
    "\056\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\077" +
    "\012\076\013\074\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\050\075\051\uffc9\001\002\000\032\004\uffd1\005" +
    "\uffd1\006\uffd1\007\123\010\117\015\uffd1\017\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\051\127\001\002\000\032\004" +
    "\uffcd\005\uffcd\006\uffcd\007\123\010\117\015\uffcd\017\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\051\127\001\002\000" +
    "\032\004\uffd2\005\uffd2\006\uffd2\007\123\010\117\015\uffd2" +
    "\017\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\051\127\001" +
    "\002\000\056\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\077\012\076\013\074\015\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\050\075\051\uffcb\001\002\000\032\004" +
    "\uffce\005\uffce\006\uffce\007\123\010\117\015\uffce\017\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\051\127\001\002\000" +
    "\032\004\uffd0\005\uffd0\006\uffd0\007\123\010\117\015\uffd0" +
    "\017\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\051\127\001" +
    "\002\000\032\004\uffcf\005\uffcf\006\uffcf\007\123\010\117" +
    "\015\uffcf\017\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\051" +
    "\127\001\002\000\056\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\077\012\076\013\074\015\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\050\075\051\uffca\001\002\000" +
    "\004\017\142\001\002\000\056\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\050\uffc1\051\uffc1\001" +
    "\002\000\004\047\uffe4\001\002\000\026\016\041\063\053" +
    "\070\037\071\044\072\040\073\045\074\042\075\034\076" +
    "\046\077\051\001\002\000\006\006\070\017\146\001\002" +
    "\000\004\004\uffb6\001\002\000\004\041\150\001\002\000" +
    "\004\046\017\001\002\000\026\033\uffe0\034\uffe0\035\152" +
    "\036\uffe0\037\uffe0\040\uffe0\047\uffe0\053\uffe0\054\uffe0\073" +
    "\uffe0\001\002\000\004\046\017\001\002\000\024\033\uffe1" +
    "\034\uffe1\036\uffe1\037\uffe1\040\uffe1\047\uffe1\053\uffe1\054" +
    "\uffe1\073\uffe1\001\002\000\024\033\uffe2\034\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\047\uffe2\053\uffe2\054\uffe2\073\uffe2\001" +
    "\002\000\026\016\041\063\053\070\037\071\044\072\040" +
    "\073\045\074\042\075\034\076\046\077\051\001\002\000" +
    "\004\004\157\001\002\000\024\033\uffd9\034\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\047\uffd9\053\uffd9\054\uffd9\073\uffd9\001" +
    "\002\000\026\016\041\063\053\070\037\071\044\072\040" +
    "\073\045\074\042\075\034\076\046\077\051\001\002\000" +
    "\004\017\162\001\002\000\004\004\163\001\002\000\024" +
    "\033\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb\047\uffdb\053" +
    "\uffdb\054\uffdb\073\uffdb\001\002\000\056\004\uffd3\016\uffd3" +
    "\026\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\045\uffd3\047\uffd3\053\uffd3\054\uffd3\063\uffd3\070\uffd3" +
    "\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077" +
    "\uffd3\001\002\000\004\073\166\001\002\000\004\017\167" +
    "\001\002\000\004\004\170\001\002\000\024\033\uffda\034" +
    "\uffda\036\uffda\037\uffda\040\uffda\047\uffda\053\uffda\054\uffda" +
    "\073\uffda\001\002\000\004\027\172\001\002\000\026\016" +
    "\041\063\053\070\037\071\044\072\040\073\045\074\042" +
    "\075\034\076\046\077\051\001\002\000\004\042\174\001" +
    "\002\000\026\016\041\063\053\070\037\071\044\072\040" +
    "\073\045\074\042\075\034\076\046\077\051\001\002\000" +
    "\004\043\176\001\002\000\004\046\017\001\002\000\024" +
    "\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\047\uffdd\053" +
    "\uffdd\054\uffdd\073\uffdd\001\002\000\004\045\201\001\002" +
    "\000\026\016\041\063\053\070\037\071\044\072\040\073" +
    "\045\074\042\075\034\076\046\077\051\001\002\000\004" +
    "\004\203\001\002\000\024\033\uffdc\034\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\047\uffdc\053\uffdc\054\uffdc\073\uffdc\001\002" +
    "\000\004\043\205\001\002\000\004\046\017\001\002\000" +
    "\024\033\uffde\034\uffde\036\uffde\037\uffde\040\uffde\047\uffde" +
    "\053\uffde\054\uffde\073\uffde\001\002\000\004\002\001\001" +
    "\002\000\010\031\ufff7\032\252\046\ufff7\001\002\000\004" +
    "\073\212\001\002\000\004\024\216\001\002\000\012\031" +
    "\uffef\032\uffef\046\uffef\073\212\001\002\000\010\031\ufffa" +
    "\032\ufffa\046\ufffa\001\002\000\010\031\ufff0\032\ufff0\046" +
    "\ufff0\001\002\000\024\055\221\056\224\057\217\060\220" +
    "\064\227\065\222\066\230\067\223\073\225\001\002\000" +
    "\006\004\uffa9\017\uffa9\001\002\000\006\004\uffa8\017\uffa8" +
    "\001\002\000\004\014\245\001\002\000\006\004\uffa6\017" +
    "\uffa6\001\002\000\004\073\232\001\002\000\006\004\uffac" +
    "\017\uffac\001\002\000\006\004\uffa7\017\uffa7\001\002\000" +
    "\004\004\231\001\002\000\006\004\uffaa\017\uffaa\001\002" +
    "\000\006\004\uffab\017\uffab\001\002\000\012\031\uffee\032" +
    "\uffee\046\uffee\073\uffee\001\002\000\012\004\uffe5\005\uffe5" +
    "\006\243\017\uffe5\001\002\000\004\005\240\001\002\000" +
    "\006\047\236\073\232\001\002\000\012\031\uffa3\046\uffa3" +
    "\047\uffa3\073\uffa3\001\002\000\006\004\uffad\017\uffad\001" +
    "\002\000\012\031\uffa4\046\uffa4\047\uffa4\073\uffa4\001\002" +
    "\000\024\055\221\056\224\057\217\060\220\064\227\065" +
    "\222\066\230\067\223\073\225\001\002\000\004\004\242" +
    "\001\002\000\012\031\uffa5\046\uffa5\047\uffa5\073\uffa5\001" +
    "\002\000\004\073\232\001\002\000\010\004\uffe6\005\uffe6" +
    "\017\uffe6\001\002\000\026\016\041\063\053\070\037\071" +
    "\044\072\040\073\045\074\042\075\034\076\046\077\051" +
    "\001\002\000\006\006\070\015\247\001\002\000\004\044" +
    "\250\001\002\000\024\055\221\056\224\057\217\060\220" +
    "\064\227\065\222\066\230\067\223\073\225\001\002\000" +
    "\006\004\uffae\017\uffae\001\002\000\004\073\232\001\002" +
    "\000\006\031\ufff2\046\ufff2\001\002\000\006\031\256\046" +
    "\ufffd\001\002\000\006\031\ufff3\046\ufff3\001\002\000\004" +
    "\073\257\001\002\000\006\005\uffec\016\007\001\002\000" +
    "\004\005\261\001\002\000\024\055\221\056\224\057\217" +
    "\060\220\064\227\065\222\066\230\067\223\073\225\001" +
    "\002\000\004\004\263\001\002\000\004\046\017\001\002" +
    "\000\004\004\265\001\002\000\006\031\ufff1\046\ufff1\001" +
    "\002\000\010\031\ufff8\046\ufff8\073\232\001\002\000\004" +
    "\024\273\001\002\000\014\031\ufffc\032\ufffc\046\ufffc\061" +
    "\ufffc\073\267\001\002\000\014\031\ufff5\032\ufff5\046\ufff5" +
    "\061\ufff5\073\ufff5\001\002\000\014\031\ufff6\032\ufff6\046" +
    "\ufff6\061\ufff6\073\ufff6\001\002\000\014\072\040\074\042" +
    "\075\034\076\046\077\051\001\002\000\004\004\275\001" +
    "\002\000\014\031\ufff4\032\ufff4\046\ufff4\061\ufff4\073\ufff4" +
    "\001\002\000\004\073\232\001\002\000\004\032\306\001" +
    "\002\000\006\004\uffe7\017\uffe7\001\002\000\006\004\303" +
    "\017\304\001\002\000\006\004\uffea\017\uffea\001\002\000" +
    "\010\032\276\052\277\073\232\001\002\000\006\004\uffed" +
    "\005\uffed\001\002\000\006\004\uffeb\017\uffeb\001\002\000" +
    "\004\073\232\001\002\000\004\005\310\001\002\000\024" +
    "\055\221\056\224\057\217\060\220\064\227\065\222\066" +
    "\230\067\223\073\225\001\002\000\006\004\uffe9\017\uffe9" +
    "\001\002\000\004\005\313\001\002\000\024\055\221\056" +
    "\224\057\217\060\220\064\227\065\222\066\230\067\223" +
    "\073\225\001\002\000\006\004\uffe8\017\uffe8\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\007\001\001\000\010\034\300" +
    "\035\301\036\277\001\001\000\002\001\001\000\010\003" +
    "\013\004\014\012\012\001\001\000\006\024\267\025\270" +
    "\001\001\000\004\027\207\001\001\000\002\001\001\000" +
    "\004\014\015\001\001\000\002\001\001\000\012\006\031" +
    "\021\023\040\026\043\025\001\001\000\020\007\203\010" +
    "\046\011\034\017\042\020\051\041\053\043\035\001\001" +
    "\000\004\014\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\146\010\046\011\034\017" +
    "\042\020\051\041\053\043\035\001\001\000\004\042\103" +
    "\001\001\000\012\006\031\021\142\040\026\043\025\001" +
    "\001\000\020\007\047\010\046\011\034\017\042\020\051" +
    "\041\053\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\140\010\046\011\034\017\042\020\051\041" +
    "\053\043\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\054\020\051\041\053\043" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\056\010\046\011\034\015\061\016\057\017\042\020" +
    "\051\037\060\041\053\043\035\001\001\000\002\001\001" +
    "\000\026\007\056\010\046\011\034\015\072\016\057\017" +
    "\042\020\051\037\060\041\053\043\035\001\001\000\002" +
    "\001\001\000\004\044\063\001\001\000\004\014\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\071\001\001\000\020\007\070\010\046\011" +
    "\034\017\042\020\051\041\053\043\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\102\020\051\041\053\043\035\001\001\000\012\011\101" +
    "\020\051\041\053\043\035\001\001\000\012\011\100\020" +
    "\051\041\053\043\035\001\001\000\012\011\077\020\051" +
    "\041\053\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\056\010\046\011\034\017\042\020\051\037" +
    "\114\041\053\043\035\001\001\000\022\007\056\010\046" +
    "\011\034\017\042\020\051\037\111\041\053\043\035\001" +
    "\001\000\002\001\001\000\004\042\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\137\011\034\020\051\041\053\043\035\001\001\000" +
    "\016\010\046\011\034\017\136\020\051\041\053\043\035" +
    "\001\001\000\016\010\046\011\034\017\135\020\051\041" +
    "\053\043\035\001\001\000\016\010\046\011\034\017\134" +
    "\020\051\041\053\043\035\001\001\000\014\010\133\011" +
    "\034\020\051\041\053\043\035\001\001\000\016\010\046" +
    "\011\034\017\132\020\051\041\053\043\035\001\001\000" +
    "\016\010\046\011\034\017\131\020\051\041\053\043\035" +
    "\001\001\000\016\010\046\011\034\017\130\020\051\041" +
    "\053\043\035\001\001\000\014\010\127\011\034\020\051" +
    "\041\053\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\056\010\046\011\034\017\042\020" +
    "\051\037\144\041\053\043\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\150\001" +
    "\001\000\002\001\001\000\004\014\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\155\010\046\011" +
    "\034\017\042\020\051\041\053\043\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\160\010\046\011" +
    "\034\017\042\020\051\041\053\043\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\172\010" +
    "\046\011\034\017\042\020\051\041\053\043\035\001\001" +
    "\000\002\001\001\000\020\007\174\010\046\011\034\017" +
    "\042\020\051\041\053\043\035\001\001\000\002\001\001" +
    "\000\004\014\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\201\010\046\011\034\017\042\020\051" +
    "\041\053\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\252\001\001\000" +
    "\006\026\213\030\212\001\001\000\002\001\001\000\006" +
    "\026\214\030\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\234\033\233\036\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\236\036\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\243\001" +
    "\001\000\002\001\001\000\022\007\056\010\046\011\034" +
    "\017\042\020\051\037\245\041\053\043\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\250\001\001" +
    "\000\002\001\001\000\010\032\234\033\265\036\232\001" +
    "\001\000\004\022\253\001\001\000\004\023\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\257\001" +
    "\001\000\002\001\001\000\004\013\261\001\001\000\002" +
    "\001\001\000\004\014\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\236\036\232\001\001\000\002" +
    "\001\001\000\004\025\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\304\036\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\306\001\001\000\002\001\001" +
    "\000\004\013\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\313\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
  
    public void report_error(String message, Object info) {
   
       
        StringBuffer m = new StringBuffer("Error");
   
       
        if (info instanceof java_cup.runtime.Symbol) {
           
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
           
            if (s.left >= 0) {                
               
                m.append(" in line "+(s.left+1));   
               
                if (s.right >= 0)                    
                    
                    m.append(", column "+(s.right+1));
            }
        }
   
       
        m.append(" : "+message);
   
      
        System.err.println(m);
    }
   
  
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // decl_list ::= decl_param 
            {
              Declaracion RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion d1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // decl_list ::= decl_list decl_param 
            {
              Declaracion RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d2 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion d1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                 d1.setSiguiente(d2);
                 RESULT=d1;
                   
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // decl_param ::= ids COLON type SEMICOLON 
            {
              Declaracion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IDs id1 = (IDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new VarDeclaracion(id1.lista,t1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_param",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT= new TipoVoid(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type ::= ID 
            {
              Tipo RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new TipoId(i1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT= new TipoBooleano(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type ::= INT 
            {
              Tipo RESULT =null;
		 RESULT= new TipoInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT= new TipoFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT= new TipoChar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT= new TipoString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= RECORD decl_list END 
            {
              Tipo RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion dlist = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new TipoRecord(dlist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= ARRAY LBRACKET expr_list RBRACKET OF type 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new TipoArray(e1,t1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_list ::= expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_list ::= expr_list SEMI expr 
            {
              Expresion RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion lista = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.siguiente=e1;RESULT=lista;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // accesor_list ::= 
            {
              Access RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // accesor_list ::= LBRACKET expr_list RBRACKET accesor_list 
            {
              Access RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion elist = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Access alist = (Access)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  AccessArreglo arreglo= new AccessArreglo(elist);
                                            arreglo.next=alist;
                                            RESULT=arreglo;
                                            
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // accesor_list ::= DOT ID accesor_list 
            {
              Access RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aclistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aclistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Access aclist = (Access)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                AccessMiembro miembro= new AccessMiembro(id);
                                                miembro.next=aclist;
                                                RESULT=miembro;  
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable ::= ID accesor_list 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Access list = (Access)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                            ExpreVariables tid= new ExpreVariables(id,list);
                                            RESULT=tid;
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function_callexpr ::= ID LPAR expr_list RPAR 
            {
              Expresion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exprlist = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ExpreFunctionCall(exprlist,id1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_callexpr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_call ::= ID LPAR expr_list RPAR 
            {
              Sentencia RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exprlist = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SentenciaLlamadaFuncion(exprlist,id1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= INT_LITERAL 
            {
              Expresion RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int i1 = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LiteralEntero(i1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= CHAR_LITERAL 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char c1 = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LiteralChar(c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= FLOAT_LITERAL 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float f1 = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new LiteralFloat(f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= BOOLEAN_LITERAL 
            {
              Expresion RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean b1 = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralBooleana(b1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= STRING_LITERAL 
            {
              Expresion RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new LiteralString(s1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= variable 
            {
              Expresion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= literal 
            {
              Expresion RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion l1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=l1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = new LiteralBooleana(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = new LiteralBooleana(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= function_callexpr 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= LPAR expr RPAR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= NOT term 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreNot(t1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= term 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= factor AND term 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreAnd(f1,t1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= factor MOD term 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreMod(f1,t1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= factor DIVIDE term 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreDivision(f1,t1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= factor TIMES term 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreMultiplicacion(f1,t1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // addition ::= factor 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=f1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // addition ::= addition OR factor 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreOr(a1,f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // addition ::= addition MINUS factor 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreResta(a1,f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // addition ::= addition PLUS factor 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreSuma(a1,f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= addition 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=a1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= addition NOT_EQUAL addition 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreNotEqual(a1,a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= addition EQUAL addition 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreEqual(a1,a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= addition LESS_THAN_OR_EQUAL addition 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreLessEqual(a1,a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= addition LESS_THAN addition 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreLessThan(a1,a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= addition GREATER_THAN addition 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreGreaterThan(a1,a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= addition GREATER_THAN_OR_EQUAL addition 
            {
              Expresion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ExpreGreaterEqual(a1,a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compound ::= BEGIN stms END 
            {
              Sentencia RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=s1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // case ::= expr_list COLON compound 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // case_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // case_list ::= case case_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // else ::= ELSE compound 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= variable ASSIGN expr SEMICOLON 
            {
              Sentencia RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion v1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SentenciaAsignacion(v1,e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= READLN LPAR ID RPAR SEMICOLON 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= WRITELN LPAR expr RPAR SEMICOLON 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new SentenciaWrite(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= REPEAT compound UNTIL expr SEMICOLON 
            {
              Sentencia RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencia c1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SentenciaRepeat(e1,c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= FOR ID ASSIGN expr TO expr DO compound 
            {
              Sentencia RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia c1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= new SentenciaFor(i1,e1,e2,c1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= WHILE expr DO compound 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia c1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new SentenciaWhile(c1,e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= CASE expr OF case_list else END 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= IF expr THEN compound 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia c1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new SentenciaIf(e1,c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= IF expr THEN compound ELSE compound 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentencia c1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia c2 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new SentenciaIf(e1,c1,c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= function_call SEMICOLON 
            {
              Sentencia RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia f1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT=f1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stms ::= statement 
            {
              Sentencia RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia st1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stms",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stms ::= statement stms 
            {
              Sentencia RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia st1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sm1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		st1.setSiguiente(sm1); RESULT= st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stms",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ids ::= ID 
            {
              IDs RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IDs id=new IDs(); id.nombre=id1;id.lista.add(id1);RESULT= id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ids ::= ID SEMI ids 
            {
              IDs RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IDs id2 = (IDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		id2.lista.add(id1); 
                 RESULT= id2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param ::= ids 
            {
              Expresion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IDs id1 = (IDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ConvertToExpreList list= new ConvertToExpreList(id1.lista);
                         ExpreList elist=list.getLista();
                         RESULT=new ExpreParam(elist);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param ::= VAR ids COLON type 
            {
              Expresion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IDs id1 = (IDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ConvertToExpreList list= new ConvertToExpreList(id1.lista);
                          ExpreList elist=list.getLista();
                          RESULT=new ExpreParam(elist,t1);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= REF VAR ids COLON type 
            {
              Expresion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IDs id1 = (IDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ConvertToExpreList list= new ConvertToExpreList(id1.lista);
                          ExpreList elist=list.getLista();
                          RESULT=new ExpreParam(elist,t1);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // params ::= param 
            {
              Expresion RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion p1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // params ::= params SEMICOLON param 
            {
              Expresion RESULT =null;
		int p1lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion p1li = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion p1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 p1li.siguiente=p1; RESULT=p1li;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameter ::= 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameter ::= LPAR params RPAR 
            {
              Expresion RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion p1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_body ::= ID EQUAL type SEMICOLON 
            {
              Declaracion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TipoDeclaracion(id1,tipo1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_list ::= type_body 
            {
              Declaracion RESULT =null;
		int tb1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tb1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion tb1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= tb1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_list ::= type_body type_list 
            {
              Declaracion RESULT =null;
		int tb2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tb2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion tb2 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion tlist = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    
                    tb2.setSiguiente(tlist);
                    RESULT=tb2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= FUNCTION ID parameter COLON type SEMICOLON compound SEMICOLON 
            {
              Declaracion RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion p1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia c1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new FuncionDeclaracion(id1,t1,p1,c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functions ::= 
            {
              Declaracion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functions ::= functions function 
            {
              Declaracion RESULT =null;
		int flistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion flista = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion f1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   f1.setSiguiente(flista);
                   RESULT=f1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_decl ::= ID EQUAL literal SEMICOLON 
            {
              Declaracion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion lit = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ConstantDeclaracion(id,lit); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_list ::= const_decl 
            {
              Declaracion RESULT =null;
		int cd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion cd1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cd1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_list ::= const_list const_decl 
            {
              Declaracion RESULT =null;
		int cd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion cd2 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion cdlist = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    cdlist.setSiguiente(cd2);
                    RESULT=cdlist;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl ::= 
            {
              Declaracion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl ::= VAR decl_list 
            {
              Declaracion RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion d1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=d1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_decl ::= 
            {
              Declaracion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_decl ::= TYPE type_list 
            {
              Declaracion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion t1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constant ::= 
            {
              Declaracion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constant ::= CONST const_list 
            {
              Declaracion RESULT =null;
		int clistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion clist = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= clist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_seq ::= constant type_decl var_decl functions 
            {
              Declaracion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaracion c1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaracion t1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion v1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion f1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionSecuencia(c1,t1,v1,f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= decl_seq compound 
            {
              Bloque RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia c1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Bloque(d1,c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Program RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID parameter SEMICOLON block DOT 
            {
              Program RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b1 = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT= new Program(b1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

